'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var littleStateMachine = require('little-state-machine');
var reactSimpleAnimate = require('react-simple-animate');
var styled = _interopDefault(require('@emotion/styled'));
var get = _interopDefault(require('lodash/get'));
var reactHookForm = require('react-hook-form');
var isUndefined = _interopDefault(require('lodash/isUndefined'));
var isObject = _interopDefault(require('lodash/isObject'));

var colors = {
    primary: '#0e101c',
    secondary: '#bf1650',
    lightBlue: '#516391',
    blue: '#1e2a4a',
    lightPink: '#ec5990',
    errorPink: '#fbecf2',
    buttonBlue: '#191d3a',
    link: '#ff7aa8',
    green: '#1bda2b',
};

const paraGraphDefaultStyle = {
    fontSize: 14,
    lineHeight: '22px',
};
const Button = styled.button `
  appearance: none;
  margin: 0;
  border: 0;
  color: white;
  padding: 5px;
  border-radius: 0;
  background: ${colors.blue};
  transition: 0.2s all;

  &:hover {
    background: ${colors.lightBlue};
  }
`;
Button.defaultProps = { type: 'button' };
const CircleButton = styled(Button) `
  font-size: 14px;
  font-weight: bold;
  margin: 0 4px 0 auto;
  background: none;
  display: flex;
  width: 25px;
  height: 25px;
  justify-content: center;
  line-height: 14px;
  border-radius: 50%;
  transition: 0.2s all;

  &:hover {
    background: ${colors.lightBlue};
  }

  &:active {
    background: black;
  }
`;
const Input = styled.input `
  &::placeholder {
    color: #b3b3b3;
  }

  &:focus::placeholder {
    color: white;
  }
`;
const Table = styled.table `
  transition: 0.3s all;

  &:hover {
    background: ${colors.primary};
  }
`;

var Header = ({ setVisible, control }) => {
    return (React.createElement("header", { style: {
            display: 'flex',
            alignItems: 'center',
            paddingLeft: 10,
        } },
        React.createElement("p", { style: Object.assign({ margin: 0, padding: 0, fontWeight: 600 }, paraGraphDefaultStyle) },
            React.createElement("span", { style: {
                    transition: '0.5s all',
                    color: control.readFormStateRef.current.isValid &&
                        control.formState.isValid
                        ? colors.green
                        : colors.lightPink,
                } }, "\u25A0"),
            ' ',
            "RHF DevTools"),
        React.createElement(CircleButton, { title: "Close dev panel", onClick: () => setVisible(false) }, "\u2715")));
};

const PanelTable = ({ refObject, hasError, isDirty, fieldsValues, readFormStateRef, isNative, errorMessage, errorType, type, isTouched, name, collapseAll, index, }) => {
    const [collapse, setCollapse] = React.useState(false);
    React.useEffect(() => {
        setCollapse(!collapseAll);
    }, [collapseAll]);
    let value = fieldsValues ? fieldsValues[name] : '';
    if (fieldsValues) {
        if (isObject(fieldsValues[name])) {
            try {
                value = (React.createElement("pre", { style: { margin: 0 } },
                    React.createElement("code", { style: { fontSize: 12 } }, JSON.stringify(fieldsValues[name], null, 2))));
            }
            catch (_a) {
                value = React.createElement("span", null, "[Nested Object]");
            }
        }
        else if (typeof fieldsValues[name] !== 'string') {
            value = String(fieldsValues[name]);
        }
    }
    return (React.createElement(reactSimpleAnimate.Animate, { play: true, start: { opacity: 0, transform: 'translateY(10px)' }, end: { opacity: 1 }, easeType: "ease-in", delay: index * 0.1 },
        React.createElement(Table, { style: {
                padding: '10px 10px 10px',
                width: '100%',
                transition: '.3s all',
                borderLeft: `2px solid ${hasError ? colors.secondary : colors.buttonBlue}`,
            } },
            React.createElement("thead", null,
                React.createElement("tr", null,
                    React.createElement("td", { valign: "top", style: { width: 100, lineHeight: '22px' } },
                        React.createElement(Button, { onClick: () => setCollapse(!collapse), title: "Toggle field table", style: {
                                border: `1px solid ${colors.lightBlue}`,
                                borderRadius: 2,
                                padding: '3px 5px',
                                display: 'inline-block',
                                fontSize: 10,
                                lineHeight: '12px',
                                width: 20,
                                textAlign: 'center',
                                marginRight: 10,
                            } }, collapse ? '+' : '-'),
                        React.createElement(Button, { onClick: () => {
                                if (refObject.scrollIntoView) {
                                    refObject.scrollIntoView({ behavior: 'smooth' });
                                }
                            }, title: "Scroll into view", style: Object.assign({ border: `1px solid ${colors.lightBlue}`, borderRadius: 2, padding: '3px 5px', display: 'inline-block', fontSize: 10, lineHeight: '12px', textAlign: 'center', marginRight: 10 }, (isNative
                                ? {}
                                : { cursor: 'not-allowed', background: colors.lightBlue })) }, isNative ? 'Native' : 'Custom')),
                    React.createElement("td", { style: {
                            display: 'block',
                            maxWidth: 100,
                        } },
                        React.createElement("p", { style: Object.assign({ margin: 0, padding: 0 }, paraGraphDefaultStyle) }, name)))),
            !collapse && (React.createElement("tbody", null,
                type && (React.createElement("tr", null,
                    React.createElement("td", { align: "right", style: Object.assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "Type:"),
                    React.createElement("td", { style: Object.assign({ display: 'block', maxWidth: 100 }, paraGraphDefaultStyle) }, type))),
                errorType && (React.createElement("tr", null,
                    React.createElement("td", { align: "right", style: Object.assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "ERROR Type:"),
                    React.createElement("td", { style: Object.assign({ display: 'block', maxWidth: 100 }, paraGraphDefaultStyle) }, errorType))),
                errorMessage && (React.createElement("tr", null,
                    React.createElement("td", { align: "right", style: Object.assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "MESSAGE:"),
                    React.createElement("td", { style: Object.assign({ display: 'block', maxWidth: 100 }, paraGraphDefaultStyle) }, errorMessage.trim()))),
                fieldsValues && !isUndefined(fieldsValues[name]) && (React.createElement("tr", null,
                    React.createElement("td", { align: "right", style: Object.assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "Value:"),
                    React.createElement("td", { "data-testid": `${name}-field-value`, style: Object.assign({ display: 'block', maxWidth: 100 }, paraGraphDefaultStyle) }, value))),
                readFormStateRef.current.touched && (React.createElement("tr", null,
                    React.createElement("td", { align: "right", style: Object.assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "Touched:"),
                    React.createElement("td", null,
                        React.createElement("code", { style: Object.assign(Object.assign({ color: isTouched ? colors.green : colors.lightPink }, paraGraphDefaultStyle), { fontSize: 12 }) }, isTouched ? 'true' : 'false')))),
                readFormStateRef.current.dirtyFields && (React.createElement("tr", null,
                    React.createElement("td", { align: "right", style: Object.assign({ paddingRight: 5, fontWeight: 500, verticalAlign: 'top' }, paraGraphDefaultStyle) }, "Dirty:"),
                    React.createElement("td", null,
                        React.createElement("code", { style: Object.assign(Object.assign({ color: isDirty ? colors.green : colors.lightPink }, paraGraphDefaultStyle), { fontSize: 12 }) }, isDirty ? 'true' : 'false')))))))));
};

const FormStateTable = ({ formState, showFormState, setShowFormState, }) => (React.createElement("div", { style: {
        alignSelf: 'end',
    } },
    showFormState && (React.createElement("table", { style: {
            padding: 10,
            display: 'block',
            background: 'black',
            borderTop: `1px solid ${colors.lightPink}`,
        } },
        React.createElement("tbody", null,
            React.createElement("tr", null,
                React.createElement("td", { align: "right", style: Object.assign({ width: 90 }, paraGraphDefaultStyle) }, "Valid:"),
                React.createElement("td", { style: Object.assign({ color: formState.isValid ? colors.green : colors.lightPink }, paraGraphDefaultStyle) }, formState.isValid ? 'true' : 'false')),
            React.createElement("tr", null,
                React.createElement("td", { align: "right", style: Object.assign({}, paraGraphDefaultStyle) }, "Submitted:"),
                React.createElement("td", { style: Object.assign({ color: formState.isSubmitted ? colors.green : colors.lightPink }, paraGraphDefaultStyle) }, formState.isSubmitted ? 'true' : 'false')),
            React.createElement("tr", null,
                React.createElement("td", { align: "right", style: Object.assign({}, paraGraphDefaultStyle) }, "Count:"),
                React.createElement("td", { style: Object.assign({ color: formState.submitCount ? colors.green : colors.lightPink }, paraGraphDefaultStyle) }, formState.submitCount)),
            React.createElement("tr", null,
                React.createElement("td", { align: "right", style: Object.assign({}, paraGraphDefaultStyle) }, "Submitting:"),
                React.createElement("td", { style: Object.assign({ color: formState.isSubmitting ? colors.green : colors.lightPink }, paraGraphDefaultStyle) }, formState.isSubmitting ? 'true' : 'false'))))),
    React.createElement(Button, { style: {
            margin: 0,
            width: '100%',
            padding: '8px 10px',
            textTransform: 'none',
            fontSize: 12,
            lineHeight: '14px',
        }, title: "Toggle form state panel", onClick: () => {
            setShowFormState(!showFormState);
        } },
        React.createElement("span", { style: {
                transition: '0.5s all',
                color: formState.isValid ? colors.green : colors.lightPink,
            } }, "\u25A0"),
        ' ',
        "Form State: ",
        showFormState ? 'OFF' : 'ON')));

function setVisible(state, payload) {
    return Object.assign(Object.assign({}, state), { visible: payload });
}
function setCollapse(state, payload) {
    return Object.assign(Object.assign({}, state), { isCollapse: payload });
}

var Panel = ({ control: { fieldsRef, getValues, formState, errorsRef, readFormStateRef }, }) => {
    const { state, action } = littleStateMachine.useStateMachine(setCollapse);
    const [, setData] = React.useState({});
    const [showFormState, setShowFormState] = React.useState(false);
    const fieldsValues = getValues();
    const { register, watch } = reactHookForm.useForm();
    const searchTerm = watch('search', '');
    React.useEffect(() => {
        setData({});
    }, []);
    return (React.createElement("div", { style: {
            display: 'grid',
            gridTemplateRows: '56px auto',
            height: process.env.NODE_ENV === 'test' ? '100vh' : 'calc(100vh - 40px)',
        } },
        React.createElement("div", { style: {
                display: 'grid',
                gridTemplateColumns: `1fr 1fr`,
                gridTemplateRows: '28px 28px',
            } },
            React.createElement(Button, { style: {
                    borderRight: `1px solid ${colors.primary}`,
                    textTransform: 'none',
                    fontSize: 11,
                    lineHeight: 1,
                }, title: "Update values and state the form", onClick: () => setData({}) }, "\u267A UPDATE"),
            React.createElement(Button, { style: {
                    borderRight: `1px solid ${colors.primary}`,
                    textTransform: 'none',
                    fontSize: 11,
                    lineHeight: 1,
                }, title: "Toggle entire fields", onClick: () => {
                    // @ts-ignore
                    action(!state.isCollapse);
                } }, state.isCollapse ? '[-] COLLAPSE' : '[+] EXPAND'),
            React.createElement(Input, { style: {
                    display: 'inline-block',
                    borderRadius: 0,
                    width: '100%',
                    margin: 0,
                    padding: '5px 10px',
                    WebkitAppearance: 'none',
                    appearance: 'none',
                    fontSize: 14,
                    border: 0,
                    color: 'white',
                    gridColumnStart: 1,
                    gridColumnEnd: 4,
                    background: 'black',
                }, name: "search", ref: register, placeholder: "Filter name...", type: "search" })),
        React.createElement("div", { style: {
                overflow: 'auto',
            } }, Object.entries(fieldsRef.current)
            .filter(([name]) => ((name &&
            name.toLowerCase &&
            name.toLowerCase().includes(searchTerm)) ||
            (!name && !searchTerm) ||
            searchTerm === '') &&
            name)
            .map(([name, value], index) => {
            const error = get(errorsRef.current, name);
            const errorMessage = get(error, 'message', undefined);
            const errorType = get(error, 'type', undefined);
            const type = get(value, 'ref.type', undefined);
            const isTouched = !!get(formState.touched, name);
            const isNative = value.ref.type;
            const isDirty = !!Object.keys(formState.dirtyFields).length;
            const hasError = !!error;
            const ref = get(value, 'ref');
            return (React.createElement("section", { key: `${name}${index}`, style: {
                    borderBottom: `1px dashed ${colors.secondary}`,
                    margin: 0,
                } },
                React.createElement(PanelTable, { refObject: ref, index: index, collapseAll: state.isCollapse, name: name, isTouched: isTouched, type: type, hasError: hasError, isNative: isNative, errorMessage: errorMessage, errorType: errorType, readFormStateRef: readFormStateRef, isDirty: isDirty, fieldsValues: fieldsValues })));
        })),
        React.createElement(FormStateTable, { formState: formState, showFormState: showFormState, setShowFormState: setShowFormState })));
};

const Logo = ({ style, setVisible, }) => {
    return (React.createElement("svg", { fill: "white", viewBox: "0 0 100 100", style: Object.assign({ height: 14, padding: 3, borderRadius: 2, background: colors.lightPink }, style), onClick: () => {
            setVisible(true);
        }, "aria-label": "React Hook Form Logo" },
        React.createElement("path", { d: "M73.56,13.32H58.14a8.54,8.54,0,0,0-16.27,0H26.44a11,11,0,0,0-11,11V81.63a11,11,0,0,0,11,11H73.56a11,11,0,0,0,11-11V24.32A11,11,0,0,0,73.56,13.32Zm-30.92,2a1,1,0,0,0,1-.79,6.54,6.54,0,0,1,12.78,0,1,1,0,0,0,1,.79h5.38v6.55a3,3,0,0,1-3,3H40.25a3,3,0,0,1-3-3V15.32ZM82.56,81.63a9,9,0,0,1-9,9H26.44a9,9,0,0,1-9-9V24.32a9,9,0,0,1,9-9h8.81v6.55a5,5,0,0,0,5,5h19.5a5,5,0,0,0,5-5V15.32h8.81a9,9,0,0,1,9,9Z" }),
        React.createElement("path", { style: { transform: 'translateX(-25px)' }, d: "M71.6,45.92H54a1,1,0,0,0,0,2H71.6a1,1,0,0,0,0-2Z" }),
        React.createElement("path", { d: "M71.6,45.92H54a1,1,0,0,0,0,2H71.6a1,1,0,0,0,0-2Z" }),
        React.createElement("path", { style: { transform: 'translateX(-25px)' }, d: "M71.1,69.49H53.45a1,1,0,1,0,0,2H71.1a1,1,0,0,0,0-2Z" }),
        React.createElement("path", { d: "M71.1,69.49H53.45a1,1,0,1,0,0,2H71.1a1,1,0,0,0,0-2Z" })));
};

function PanelShadow({ visible }) {
    return (React.createElement(reactSimpleAnimate.Animate, { play: visible, duration: 0.1, start: {
            transform: 'translateX(8px)',
        }, end: {
            transform: 'translateX(0)',
        }, delay: 0.3 },
        React.createElement("div", { style: {
                position: 'relative',
            } },
            React.createElement("div", { style: {
                    position: 'fixed',
                    height: '100vh',
                    width: 250,
                    zIndex: 99998,
                    background: 'black',
                    top: 7,
                    right: 7,
                    boxShadow: 'rgba(15, 15, 29, 0.4) -3px 3px 6px 0px',
                } }),
            React.createElement("span", { style: {
                    width: 0,
                    height: 0,
                    position: 'fixed',
                    zIndex: 99998,
                    borderTop: '10px solid transparent',
                    borderBottom: '10px solid transparent',
                    borderRight: `10px solid black`,
                    right: 247,
                    top: -3,
                } }),
            React.createElement("span", { style: {
                    width: 0,
                    height: 0,
                    position: 'fixed',
                    zIndex: 99998,
                    borderTop: '10px solid transparent',
                    borderBottom: '10px solid transparent',
                    borderRight: `10px solid ${colors.buttonBlue}`,
                    right: 247,
                    top: 37,
                } }),
            React.createElement("span", { style: {
                    width: 10,
                    height: 21,
                    position: 'fixed',
                    zIndex: 99998,
                    right: 247,
                    top: 47,
                    background: colors.buttonBlue,
                } }),
            React.createElement("span", { style: {
                    width: 0,
                    height: 0,
                    position: 'fixed',
                    zIndex: 99998,
                    borderTop: '10px solid transparent',
                    borderBottom: '10px solid transparent',
                    borderLeft: `10px solid ${colors.buttonBlue}`,
                    right: 247,
                    top: 55,
                } }))));
}

const DevToolUI = ({ control }) => {
    const { state, action } = littleStateMachine.useStateMachine(setVisible);
    return (React.createElement(React.Fragment, null,
        React.createElement(reactSimpleAnimate.Animate, { play: !state.visible, duration: 0.2, start: {
                position: 'fixed',
                top: 0,
                right: 0,
                transform: 'translateX(0)',
                zIndex: 99999,
            }, end: {
                top: 0,
                right: 0,
                position: 'fixed',
                transform: 'translateX(280px)',
                zIndex: 99999,
            } },
            React.createElement("div", { style: {
                    position: 'fixed',
                    height: '100vh',
                    width: 250,
                    zIndex: 99999,
                    background: colors.buttonBlue,
                    top: 0,
                    right: 0,
                    display: 'grid',
                    textAlign: 'left',
                    color: 'white',
                    fontSize: 14,
                    gridTemplateRows: '40px auto',
                    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
                } },
                React.createElement(Header, { setVisible: action, control: control }),
                React.createElement(Panel, { control: control })),
            React.createElement(PanelShadow, { visible: state.visible })),
        !state.visible && (React.createElement(Button, { title: "Show dev panel", style: {
                position: 'fixed',
                zIndex: 99999,
                top: 3,
                right: 3,
                padding: 3,
                margin: 0,
                background: 'none',
            } },
            React.createElement(Logo, { setVisible: action })))));
};

if (typeof window !== 'undefined') {
    littleStateMachine.setStorageType(window.localStorage);
}
littleStateMachine.createStore({
    visible: true,
    isCollapse: false,
    filterName: '',
}, {
    name: '__REACT_HOOK_FORM_DEVTOOLS__',
});
const DevTool = ({ control }) => {
    return (React.createElement(littleStateMachine.StateMachineProvider, null,
        React.createElement(DevToolUI, { control: control })));
};

exports.DevTool = DevTool;
