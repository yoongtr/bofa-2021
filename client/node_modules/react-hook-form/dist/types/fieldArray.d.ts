import { Control } from 'react-hook-form/dist/types/form';
import { FieldValues } from 'react-hook-form/dist/types/fields';
import { FieldPath, FieldPathValue } from 'react-hook-form/dist/types/utils';
export declare type FieldArrayName = string;
export declare type FieldArrayDefaultValues = Partial<Record<FieldArrayName, any>>;
export declare type UseFieldArrayProps<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>, TKeyName extends string = 'id'> = {
    name: TName;
    keyName?: TKeyName;
    control?: Control<TFieldValues>;
};
declare type InferArrayType<T> = T extends (infer U)[] ? U : never;
export declare type FieldArrayWithId<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>, TKeyName extends string = 'id'> = InferArrayType<FieldPathValue<TFieldValues, TName>> & Record<TKeyName, string>;
export declare type FieldArray<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>> = InferArrayType<FieldPathValue<TFieldValues, TName>>;
export declare type FieldArrayMethodsOption = {
    shouldFocus?: boolean;
    focusIndex?: number;
    focusName?: string;
};
export declare type UseFieldArrayMethods<TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>, TKeyName extends string = 'id'> = {
    swap: (indexA: number, indexB: number) => void;
    move: (indexA: number, indexB: number) => void;
    prepend: (value: Partial<FieldArray<TFieldValues, TName>> | Partial<FieldArray<TFieldValues, TName>>[], options?: FieldArrayMethodsOption) => void;
    append: (value: Partial<FieldArray<TFieldValues, TName>> | Partial<FieldArray<TFieldValues, TName>>[], options?: FieldArrayMethodsOption) => void;
    remove: (index?: number | number[]) => void;
    insert: (index: number, value: Partial<FieldArray<TFieldValues, TName>> | Partial<FieldArray<TFieldValues, TName>>[], options?: FieldArrayMethodsOption) => void;
    fields: FieldArrayWithId<TFieldValues, TName, TKeyName>[];
};
export {};
